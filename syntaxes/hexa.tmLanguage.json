{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Hexa",
	"scopeName": "source.hexa",
	"uuid": "66b008f2-f9ad-481c-8d85-ecf5d0d88ff9",
	"patterns": [
		{
			"name": "invalid.hexa",
			"match": ";"
		},
		{
			"name": "keyword.others.hexa",
			"match": "\\s*#(if|else|end|error|elseif)\\b"
		},
		{
			"name": "keyword.declaration.hexa",
			"match": "\\b(declare|extends|implements)\\b"
		},
		{
			"include": "#enum"
		},
		{
			"name": "storage.type.hexa",
			"match": "\\b(class|interface|enum|let|var|fun)\\b"
		},
		{
			"name": "storage.modifier.hexa",
			"match": "\\b(import|private|static)\\b"
		},
		{
			"name": "keyword.statement.hexa",
			"match": "\\b(try|catch|break|case|continue|do|else|if|in|for|return|throw|switch|while)\\b"
		},
		{
			"name": "support.type.hexa",
			"match": "\\b([A-Z][A-Za-z_0-9]*)\\b"
		},
		{
			"name": "keyword.expressions-and-types.hexa",
			"match": "\\b(as|is|new|this|super|and|or|not)\\b"
		},
		{
			"name": "constant.language.hexa",
			"match": "\\b(true|false|null)\\b"
		},
		{
			"name": "storage.attribute.hexa",
			"match": "@[a-z_][a-zA-Z_0-9]*\\b"
		},
		{
			"name": "keyword.operator.range.hexa",
			"match": "\\.\\.\\."
		},
		{
			"comment": ".a.b",
			"match": "(\\.)([a-z_][a-zA-Z_0-9]*)((\\.)([a-z_][a-zA-Z_0-9]*))?",
			"captures": {
				"1": {
					"names": "punctuation.period.hexa",
					"name": "keyword.operator.access.dot.hexa"
				},
				"2": {
					"sname": "storage.attribute.hexa",
					"ssname": "variable.other.hexa",
					"good_name": "support.type.hexa",
					"name": "entity.name.hexa"
				},
				"4": {
					"sname": "entity.name.hexa",
					"name": "keyword.operator.access.dot.hexa"
				},
				"5": {
					"sname": "punctuation.period.hexa",
					"name": "keyword.type.variable.hexa"
				}
			}
		},
		{
			"name": "constant.language.hexa",
			"begin": "\\$[a-z_][a-zA-Z_0-9]*\\(",
			"beginCaptures": {
				"0": {
					"name": "constant.language.hexa"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "constant.language.hexa"
				}
			},
			"patterns": [
				{
					"include": "#macro-nested"
				}
			]
		},
		{
			"name": "constant.language.hexa",
			"match": "\\$[a-z_][a-zA-Z_0-9]*\\b"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#literal"
		},
		{
			"include": "#operator"
		}
	],
	"repository": {
		"macro-nested": {
			"patterns": [
				{
					"name": "keyword.declaration.hexa",
					"match": "\\$[a-z_][a-zA-Z_0-9]*\\b"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "constant.language.hexa"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "constant.language.hexa"
						}
					},
					"patterns": [
						{
							"include": "#macro-nested"
						}
					]
				}
			]
		},
		"doc-comment-markup": {
			"patterns": [
				{
					"name": "storage.attribute.hexa",
					"match": "@[a-z_][a-zA-Z_0-9]*\\b"
				}
			]
		},
		"comment-markup": {
			"patterns": [
				{
					"name": "keyword.declaration.hexa",
					"match": "\\b(TODO|NOTE)\\b"
				},
				{
					"name": "constant.language.hexa",
					"match": "http(s)?:\/\/[a-zA-Z./[0-9]-?&âœ“%=+#@_]+"
				},
				{
					"name": "constant.language.hexa",
					"begin": "```",
					"beginCaptures": {
						"0": {
							"name": "constant.language.hexa"
						}
					},
					"end": "```",
					"endCaptures": {
						"0": {
							"name": "constant.language.hexa"
						}
					},
					"patterns": [
						{
							"name": "comment.block.hexa",
							"match": "^[ ]*// "
						},
						{
							"name": "comment.block.hexa",
							"match": "^[ ]*/// "
						}
					]
				},
				{
					"name": "constant.language.hexa",
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "constant.language.hexa"
						}
					},
					"end": "`|$",
					"endCaptures": {
						"0": {
							"name": "constant.language.hexa"
						}
					}
				},
				{
					"name": "markup.bold.markdown",
					"begin": "\\*\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bold.markdown"
						}
					},
					"end": "\\*\\*|$",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bold.markdown"
						}
					},
					"patterns": [
						{
							"name": "markup.italic.markdown",
							"begin": "\\*",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.italic.markdown"
								}
							},
							"end": "\\*",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.italic.markdown"
								}
							}
						}
					]
				},
				{
					"name": "markup.italic.markdown",
					"begin": "\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.italic.markdown"
						}
					},
					"end": "\\*|$",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.italic.markdown"
						}
					}
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.hexa",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.hexa"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.hexa"
						}
					},
					"patterns": [
						{
							"include": "#comment-markup"
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.hexa"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.block.documentation.hexa",
							"begin": "(?<!/)(///)(?!/)",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.hexa"
								},
								"1": {
									"name": "constant.character.escape.hexa"
								}
							},
							"patterns": [
								{
									"include": "#doc-comment-markup"
								},
								{
									"include": "#comment-markup"
								}
							],
							"end": "(?=$)"
						},
						{
							"name": "comment.line.double-slash.hexa",
							"begin": "(?<!/)//(?:(?!/)|(?=//))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.hexa"
								}
							},
							"patterns": [
								{
									"include": "#comment-markup"
								}
							],
							"end": "(?=$)"
						}
					]
				}
			]
		},
		"escaped-char": {
			"patterns": [
				{
					"name": "constant.character.escape.hexa",
					"match": "\\\\[0\\\\tnr\"']"
				},
				{
					"name": "constant.character.escape.hexa",
					"match": "\\\\(x\\h{2}|u\\h{4}|U\\h{8})"
				},
				{
					"name": "invalid.illegal.constant.character.escape.hexa",
					"match": "\\\\[^uxU]"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"include": "#literal-float"
				},
				{
					"include": "#literal-number"
				},
				{
					"include": "#literal-big-number"
				},
				{
					"include": "#literal-hexadecimal"
				},
				{
					"include": "#literal-big-hexadecimal"
				},
				{
					"include": "#literal-binary"
				},
				{
					"include": "#literal-big-binary"
				},
				{
					"include": "#literal-string"
				},
				{
					"include": "#raw-string"
				}
			]
		},
		"literal-big-number": {
			"name": "constant.numeric.hexa",
			"match": "\\b([0-9]+n)\\b"
		},
		"literal-number": {
			"comment": "1_2_3u64",
			"name": "constant.numeric.hexa",
			"match": "\\b([0-9][0-9_]*([iu](8|16|32|64))?)\\b",
			"captures": {
				"1": {
					"name": "constant.numeric.hexa"
				},
				"2": {
					"name": "entity.name.type.numeric.hexa"
				}
			}
		},
		"literal-big-hexadecimal": {
			"name": "constant.numeric.hexa",
			"match": "\\b(0x[0-9A-Fa-f]+n)\\b"
		},
		"literal-hexadecimal": {
			"name": "constant.numeric.hexa",
			"match": "\\b((0x)[0-9A-Fa-f]+([iu](8|16|32|64))?)\\b",
			"captures": {
				"2": {
					"name": "entity.name.type.numeric.hexa"
				},
				"3": {
					"name": "entity.name.type.numeric.hexa"
				}
			}
		},
		"literal-big-binary": {
			"name": "constant.numeric.hexa",
			"match": "\\b(0b[0-1]+n)\\b"
		},
		"literal-binary": {
			"name": "constant.numeric.hexa",
			"match": "\\b(0b[0-1]+([iu](8|16|32|64))?)\\b"
		},
		"literal-float": {
			"name": "constant.numeric.hexa",
			"match": "\\b((([1-9][0-9]*)|(0[1-9][0-9]+)|0)\\.[0-9]+(f(16|32))?)\\b"
		},
		"literal-string": {
			"patterns": [
				{
					"begin": "([\"])",
					"end": "([\"])",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.hexa"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.hexa"
						}
					},
					"name": "string.quoted.double.hexa",
					"patterns": [
						{
							"include": "#quoted-text"
						}
					]
				},
				{
					"begin": "(['])",
					"end": "(['])",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.hexa"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.hexa"
						}
					},
					"name": "string.quoted.single.hexa",
					"patterns": [
						{
							"include": "#quoted-text"
						}
					]
				}
			]
		},
		"raw-string": {
			"name": "string.quoted.hexa",
			"begin": "`",
			"end": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.hexa"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.hexa"
				}
			}
		},
		"enum": {
			"patterns": [
				{
					"comment": ".Tag",
					"match": "(\\.)([A-Z][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.operator.access.dot.hexa"
						},
						"2": {
							"zname": "entity.name.type.enum.hexa",
							"zzname": "support.type.hexa",
							"name": "entity.name.type.enum.hexa"
						}
					}
				},
				{
					"comment": "enum A B {",
					"match": "\\b(enum)\\s+([A-Z][A-Za-z0-9_]*)\\s+([A-Z][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"sname": "storage.type.hexa",
							"name": "keyword.type.enum.hexa"
						},
						"2": {
							"sname": "constant.other.caps.hexa",
							"zname": "entity.name.type.enum.hexa",
							"name": "support.type.hexa"
						},
						"3": {
							"sname": "constant.other.caps.hexa",
							"zname": "storage.type.hexa",
							"name": "entity.name.type.enum.hexa"
						}
					}
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"include": "#operator-character"
				}
			]
		},
		"operator-character": {
			"name": "keyword.operator.hexa",
			"match": "[\\\\\\/=\\-+!*%<>&|^~,\\?:\\[\\]]"
		},
		"quoted-text": {
			"patterns": [
				{
					"name": "meta.embedded.line.hexa",
					"contentName": "source.hexa",
					"begin": "\\\\\\(",
					"end": "\\)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.hexa"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.hexa"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "#escaped-char"
				}
			]
		},
		"whitespace": {
			"match": "(?x) [ \\u0020 (?#           space) \\u000A (?#       line-feed) \\u000D (?# carriage-return) \\u0009 (?#  horizontal-tab) \\u000B (?#    vertical-tab) \\u000C (?#       form-feed) \\u0000 (?#            null) ]"
		}
	}
}
